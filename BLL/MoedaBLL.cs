///////////////////////////////////////////////////////////
//  MoedaBLL.cs
//  Implementation of the Class Moeda
//  Generated by Enterprise Architect
//  Created on:      25-abr-2015 16:56:30
//  Original author: Elcio
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using DAL;
using System.Data;
using System.Windows.Forms;
using Modelos;

namespace BLL {
	/// <summary>
	/// Moeda, parte da camada lógica utilizada para gerenciar a tabela Moeda.
	/// </summary>
	public class MoedaBLL {

        static private int proximoID = 0;

        static public int ProximaMoeda
        {
            get { return --proximoID; }
        }


		/// <summary>
		/// ID da moeda
		/// </summary>
		private int moedaID;
        public int MoedaID
        {
            get { return moedaID; }
            set { moedaID = value; }
        }

		/// <summary>
		/// Apelido da moeda
		/// </summary>
		private string apelido;
        public string Apelido
        {
            get { return apelido; }
            set { apelido = value; }
        }
		/// <summary>
		/// Símbolo da moeda
		/// </summary>
		private string simbolo;
        public string Simbolo
        {
            get { return simbolo; }
            set { simbolo = value; }
        }
		/// <summary>
		/// Índica se a moeda é o padrão do sistema.
		/// </summary>
		private bool padrao = false;
        public bool Padrao
        {
            get { return padrao; }
            set { padrao = value; }
        }


		/// <summary>
		/// Gravar a moeda incluída ou alterada no banco de dados.
		/// </summary>
		public int GravarMoeda(Moeda moeda)
        {
            MoedaDAL dal = new MoedaDAL();

            if (moeda.MoedaID < 0)
            {
                // Se a moeda for menor que zero trata-se de inclusão
                return dal.Incluir(moeda);
            }
            else
            {
                // Se a moeda for maior que zero trata-se de alteração
                return dal.Atualizar(moeda);
            }
		}

		/// <summary>
		/// Excluir a moeda do banco de dados.
		/// </summary>
		public bool ExcluirMoeda(int moedaID)
        {
            MoedaDAL dal = new MoedaDAL();
            return dal.ExcluirMoeda(moedaID);
		}

		/// <summary>
		/// Verificar se o apelido está disponível.
		/// </summary>
		public bool ApelidoDisponivel(Moeda moeda)
        {
            MoedaDAL dal = new MoedaDAL();
            return dal.ApelidoDisponivel(moeda.MoedaID, moeda.Apelido);
		}

		/// <summary>
		/// Verificar se o símbolo está disponível.
		/// </summary>
		public bool SimboloDisponivel(Moeda moeda)
        {
            MoedaDAL dal = new MoedaDAL();
            return dal.SimboloDisponivel(moeda.MoedaID, moeda.Simbolo);
		}

        /// <summary>
        /// Listar moedas.
        /// </summary>
        public DataTable ListarMoedas()
        {
            MoedaDAL dal = new MoedaDAL();
            return dal.ListarMoeda();
        }

        public bool ValidaEntrada(Moeda moeda)
        {
            // Verifica se o apelido foi informado
            if (String.IsNullOrEmpty(moeda.Apelido))
            {
                string msg = String.Format("O apelido deve ser informado.");
                DialogResult dr = MessageBox.Show(msg, "Atenção",
                                                  MessageBoxButtons.OK,
                                                  MessageBoxIcon.Exclamation);
                return false;
            }

            // Verifica se o símbolo foi informado
            if (String.IsNullOrEmpty(moeda.Simbolo))
            {
                string msg = String.Format("O símbolo deve ser informado.");
                DialogResult dr = MessageBox.Show(msg, "Atenção",
                                                  MessageBoxButtons.OK,
                                                  MessageBoxIcon.Exclamation);
                return false;
            }

            // Verifica se o apelido está disponível (ou a alteração é no próprio registro onde o apelido está gravado)
            if (!ApelidoDisponivel(moeda))
            {
                string msg = String.Format("O apelido {0} já está sendo utilizado.", moeda.Apelido);
                DialogResult dr = MessageBox.Show(msg, "Atenção",
                                                  MessageBoxButtons.OK,
                                                  MessageBoxIcon.Exclamation);                
                return false;
            }

            // Verifica se o símbolo está disponível (ou a alteração é no próprio registro onde o símbolo está gravado)
            if (!SimboloDisponivel(moeda))
            {
                string msg = String.Format("O símbolo {0} já está sendo utilizado.", moeda.Simbolo);
                DialogResult dr = MessageBox.Show(msg, "Atenção",
                                                  MessageBoxButtons.OK,
                                                  MessageBoxIcon.Exclamation);
                return false;
            }

            return true;
        }
    }//end Moeda

}

